namespace parsers {
namespace json {

#include "json_lexer.h"

namespace {

const short kCharClass[] = {
  1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 6, 7, 8,
  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 1, 1, 1, 1, 1,
  1, 12, 12, 12, 12, 13, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14, 15, 16, 1, 1,
  1, 17, 18, 12, 12, 19, 20, 1, 1, 1, 1, 1, 21, 1, 22, 1,
  1, 1, 23, 24, 25, 26, 1, 1, 1, 1, 1, 27, 1, 28
};

const short kStateMap[] = {
  0
};

const short kRuleSymbol[] = {
  -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
};

const int kClassCount = 29;

const short kAction[] = {
  -4, -3, 35, 28, -3, 27, 26, -3, -3, 25, 19, 18, -3, -3, 17, -3,
  16, -3, -3, -3, 11, -3, 7, -3, -3, 3, -3, 2, 1, -6, -6, -6,
  -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
  -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -5, -5, -5, -5, -5, -5,
  -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,
  -5, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 4, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 5, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
  -3, -3, -3, -3, 6, -3, -3, -3, -3, -3, -3, -3, -3, -3, -15, -15,
  -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
  -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -3, -3, -3, -3, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
  -3, -3, -3, -3, -3, 8, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 9, -3, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 10, -3, -3, -3, -3, -3,
  -3, -3, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
  -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
  12, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
  -3, 13, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
  -3, 14, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -3, 15, -3, -3, -3, -3, -3, -3,
  -3, -3, -3, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16,
  -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16,
  -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8,
  -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -7, -7, -7,
  -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7,
  -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -9, -9, -9, -9, -9, -9,
  -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
  -9, -9, -9, -9, -9, -9, -9, -13, -13, -13, -13, -13, -13, -13, -1, -13,
  19, 19, -13, -13, -2, -13, -13, -13, -13, -13, -2, -13, -13, -13, -13, -13,
  -13, -13, -13, -13, -3, -3, -3, -3, 22, -3, 22, -3, -3, 21, 21, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
  -3, -13, -13, -13, -13, -13, -13, -13, -13, -13, 21, 21, -13, -13, -13, -13,
  -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -3, -3,
  -3, -3, -3, -3, -3, -3, -3, 21, 21, -3, -3, -3, -3, -3, -3, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
  -3, -3, -3, -3, 24, 24, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -13, -13, -13, -13, -13, -13, -13, -13,
  -13, 24, 24, -13, -13, -2, -13, -13, -13, -13, -13, -2, -13, -13, -13, -13,
  -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -1, -13, -13, -13,
  -13, -13, -2, -13, -13, -13, -13, -13, -2, -13, -13, -13, -13, -13, -13, -13,
  -13, -13, -3, -3, -3, -3, -3, -3, -3, -3, -3, 25, 19, -3, -3, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -10,
  -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
  -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -3, 28, 28, 34,
  28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 28, 28, 28, 28,
  28, 28, 28, 28, 28, 28, 28, 28, 28, -3, -3, -3, 28, -3, -3, -3,
  -3, 28, -3, -3, -3, -3, -3, -3, 28, -3, -3, 28, -3, 28, -3, 28,
  28, -3, 28, 30, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 31,
  31, -3, 31, 31, -3, -3, -3, 31, 31, 31, 31, -3, -3, -3, -3, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 32, 32, -3, 32,
  32, -3, -3, -3, 32, 32, 32, 32, -3, -3, -3, -3, -3, -3, -3, -3,
  -3, -3, -3, -3, -3, -3, -3, -3, -3, 33, 33, -3, 33, 33, -3, -3,
  -3, 33, 33, 33, 33, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
  -3, -3, -3, -3, -3, -3, 28, 28, -3, 28, 28, -3, -3, -3, 28, 28,
  28, 28, -3, -3, -3, -3, -3, -3, -3, -3, -12, -12, -12, -12, -12, -12,
  -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12,
  -12, -12, -12, -12, -12, -12, -12, -11, -11, 35, -11, -11, -11, -11, -11, -11,
  -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11,
  -11, -11, -11, -11
};

}  // namespace

JsonLexer::JsonLexer(const string* input)
  : input_(input) {}

}  // namespace json
}  // namespace parsers
